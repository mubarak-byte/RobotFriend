{"version":3,"sources":["serviceWorker.js","components/Robotname.js","components/Robots.js","components/Robotlist.js","components/Searbox.js","components/Scroll.js","components/ErrorBoundary.js","containers/App.js","index.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","Robot","id","name","email","Robots","className","src","Robotlist","map","user","i","Seachbox","Searchfield","onchange","type","placeholder","onChange","Scroll","props","style","overflow","border","height","children","ErrorBoundry","hasError","info","this","setState","Component","App","event","target","value","fetch","response","json","users","fitteredRobot","filter","toLowerCase","includes","length","ReactDOM","render","document","getElementById","URL","process","href","origin","addEventListener","headers","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.b0a90445.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","\r\nexport const  Robot = [\r\n    {\r\n        id:1,\r\n        name:'Mubarak',\r\n        email:'mubby123@gmail.com'\r\n    },\r\n    {\r\n        id:2,\r\n        name:'Mubby',\r\n        email:'mubby123@gmail.com'\r\n    },\r\n    {\r\n        id:3,\r\n        name:'Adebayo',\r\n        email:'Adeb@gmail',\r\n    },\r\n    {\r\n        id:4,\r\n        name:'Meedrokrick',\r\n        email:'Meedrokrick@gmail.com',\r\n    },\r\n    {\r\n        id:5,\r\n        name:'Ummar',\r\n        email:'Ummar@gmail.com'\r\n    },\r\n    {\r\n        id:6,\r\n        name:'Wasiu',\r\n        email:'Wasiu@gmail.com'\r\n    },\r\n]\r\n","import React from 'react'\r\nfunction Robots ({ name,email,id}){\r\n    return (\r\n            <div className=\" tc bg-light-green dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n                <img src={`https://robohash.org/${id}?100x100\" alt=\"robotname\"`} />\r\n                <div>\r\n                <h2> {name}  </h2>\r\n                <p> {email} </p>\r\n                </div>\r\n             \r\n\r\n            </div>\r\n       \r\n    )\r\n}\r\nexport default Robots \r\n","import React from 'react'\r\nimport Robots from './Robots';\r\n\r\nconst Robotlist = ({Robot}) =>{\r\n    return(\r\n        <div>\r\n            {\r\n Robot.map((user,i) => \r\n {\r\n     return(  \r\n      <Robots \r\n       id={Robot[i].id} \r\n        name={Robot[i].name} \r\n         email={Robot[i].email}\r\n          />\r\n     )\r\n })\r\n            }\r\n       \r\n     </div>\r\n    )\r\n}\r\nexport default Robotlist","import React from 'react'\r\n\r\nconst Seachbox = ({Searchfield,onchange}) =>{\r\n    return(\r\n        <input \r\n        className=\"bg-light-green\" \r\n        type=\"search\"\r\n         placeholder=\"search\" \r\n         onChange={onchange}\r\n         />\r\n    )\r\n}\r\nexport default Seachbox","import React from 'react'\r\nconst Scroll = (props)=>{\r\n  return(\r\n    <div style={{overflow:'scroll', border:'5px solid black', height:'800px'}}>\r\n    {props.children}\r\n    </div>\r\n  )\r\n}\r\nexport default Scroll\r\n","import React,{Component} from 'react'\r\nclass ErrorBoundry extends Component{\r\n    constructor(props){\r\n      super(props);\r\n      this.state = {\r\n        hasError:false\r\n      }\r\n    }\r\n    componentDidCatch (error,info){\r\n      this.setState({hasError:true})\r\n    }\r\n    render(){\r\n      if(this.state.hasError) {\r\n                return <h1> Oops Thats not good </h1>\r\n      }\r\n      return this.props.children\r\n\r\n    }\r\n\r\n}\r\nexport default ErrorBoundry\r\n","import React , { Component } from'react'\r\nimport { Robot } from'../components/Robotname';\r\nimport Robotlist from '../components/Robotlist'\r\nimport Seachbox from '../components/Searbox';\r\nimport './App.css'\r\nimport Scroll from '../components/Scroll'\r\nimport ErrorBoundry from '../components/ErrorBoundary'\r\n\r\nclass App extends Component  {\r\n\r\n    constructor () {\r\n        super()\r\n        this.state = {\r\n            Robot:[],\r\n            Searchfield:\"\"\r\n        }\r\n    }\r\n    componentDidMount(){\r\n      fetch('https://jsonplaceholder.typicode.com/users')\r\n      .then(response => response.json())\r\n      .then(users =>   this.setState({Robot:Robot}) )\r\n\r\n    }\r\n    onchange = (event) => {\r\n     this.setState({Searchfield: event.target.value})\r\n    }\r\n    render () {\r\n      const {Robot,Searchfield}=this.state\r\n       const fitteredRobot =  Robot.filter(Robot =>{\r\n            return Robot.name.toLowerCase().includes(Searchfield.toLowerCase())\r\n\r\n        })\r\n        return !Robot.length ?\r\n         <h1> LOADING....</h1>:\r\n            <div className=\"tc \">\r\n                <h2 className=\"header\">ROBOT FRIEND</h2>\r\n               <Seachbox onchange={this.onchange}/>\r\n               <Scroll>\r\n               <ErrorBoundry>\r\n                  <Robotlist  Robot={fitteredRobot} />\r\n              </ErrorBoundry>\r\n              </Scroll>\r\n            </div>\r\n\r\n        }\r\n}\r\nexport default App\r\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport * as serviceWorker from './serviceWorker';\nimport \"tachyons\";\n\nimport App from './containers/App'\nReactDOM.render(\n  <App />\n  ,\n       document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}